{"version":3,"sources":["../lib/util.js"],"names":["valueOf","parseFloat","numUnit","unitOf","hasDigit","test","output","exec","floor","Math","number","ceil","percentage","isNaN","add","n1","n2","sub","mul","div","_n1","_n2"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAMA,UAAU,SAAVA,OAAU;AAAA,SAAWC,WAAWC,OAAX,CAAX;AAAA,CAAhB;AACA,IAAMC,SAAS,SAATA,MAAS,UAAW;AACxB,MAAMC,WAAW,MAAMC,IAAN,CAAWH,OAAX,CAAjB;AACA,MAAMI,SAAS,SAASC,IAAT,CAAcL,OAAd,CAAf;AACA,MAAG,CAACI,MAAD,IAAW,CAACF,QAAf,EAAyB;AACvB,WAAO,IAAP;AACD;AACD,SAAOE,OAAO,CAAP,CAAP;AACD,CAPD;;AASO,IAAME,wBAAQ,SAARA,KAAQ;AAAA,cAAc,sBAAUC,KAAKD,KAAL,CAAWR,QAAQU,MAAR,CAAX,CAAV,EAAuC,EAAvC,CAAd,GAA6D,sBAAUP,OAAOO,MAAP,CAAV,EAA0B,EAA1B,CAA7D;AAAA,CAAd;AACA,IAAMC,sBAAO,SAAPA,IAAO;AAAA,cAAc,sBAAUF,KAAKE,IAAL,CAAUX,QAAQU,MAAR,CAAV,CAAV,EAAsC,EAAtC,CAAd,GAA4D,sBAAUP,OAAOO,MAAP,CAAV,EAA0B,EAA1B,CAA5D;AAAA,CAAb;AACA,IAAME,kCAAa,SAAbA,UAAa,SAAU;AAClC,MAAMN,SAASN,QAAQU,MAAR,IAAkB,GAAjC;AACA,MAAGG,MAAMP,MAAN,CAAH,EAAkB;AAChB,WAAO,EAAP;AACD;AACD,SAAUA,MAAV;AACD,CANM;AAOA,IAAMQ,oBAAM,SAANA,GAAM,CAACC,EAAD,EAAKC,EAAL;AAAA,cAAgB,sBAAUhB,QAAQe,EAAR,IAAcf,QAAQgB,EAAR,CAAxB,EAAqC,EAArC,CAAhB,GAA6D,sBAAUb,OAAOY,EAAP,KAAcZ,OAAOa,EAAP,CAAxB,EAAoC,EAApC,CAA7D;AAAA,CAAZ;AACA,IAAMC,oBAAM,SAANA,GAAM,CAACF,EAAD,EAAKC,EAAL;AAAA,cAAgB,sBAAUhB,QAAQe,EAAR,IAAcf,QAAQgB,EAAR,CAAxB,EAAqC,EAArC,CAAhB,GAA6D,sBAAUb,OAAOY,EAAP,KAAcZ,OAAOa,EAAP,CAAxB,EAAoC,EAApC,CAA7D;AAAA,CAAZ;AACA,IAAME,oBAAM,SAANA,GAAM,CAACH,EAAD,EAAKC,EAAL;AAAA,cAAgB,sBAAUhB,QAAQe,EAAR,IAAcf,QAAQgB,EAAR,CAAxB,EAAqC,EAArC,CAAhB,GAA6D,sBAAUb,OAAOY,EAAP,KAAcZ,OAAOa,EAAP,CAAxB,EAAoC,EAApC,CAA7D;AAAA,CAAZ;AACA,IAAMG,oBAAM,SAANA,GAAM,CAACJ,EAAD,EAAKC,EAAL,EAAY;AAC7B,MAAMI,MAAMpB,QAAQe,EAAR,CAAZ;AACA,MAAMM,MAAMrB,QAAQgB,EAAR,CAAZ;;AAEA,MAAGI,QAAQ,CAAR,IAAaC,QAAQ,CAAxB,EAA2B;AACzB,WAAO,EAAP;AACD;AACD,cAAW,sBAAUrB,QAAQe,EAAR,IAAcf,QAAQgB,EAAR,CAAxB,EAAqC,EAArC,CAAX,GAAwD,sBAAUb,OAAOY,EAAP,KAAcZ,OAAOa,EAAP,CAAxB,EAAoC,EAApC,CAAxD;AACD,CARM","file":"util.js","sourcesContent":["import defaultTo from 'lodash.defaultto'\n\nconst valueOf = numUnit => parseFloat(numUnit)\nconst unitOf = numUnit => {\n  const hasDigit = /\\d+/.test(numUnit)\n  const output = /[a-z]+/.exec(numUnit)\n  if(!output || !hasDigit) {\n    return null\n  }\n  return output[0]\n}\n\nexport const floor = number => `${ defaultTo(Math.floor(valueOf(number)), '') }${ defaultTo(unitOf(number), '') }`\nexport const ceil = number => `${ defaultTo(Math.ceil(valueOf(number)), '') }${ defaultTo(unitOf(number), '') }`\nexport const percentage = number => {\n  const output = valueOf(number) * 100\n  if(isNaN(output)) {\n    return ''\n  }\n  return `${output}%`\n}\nexport const add = (n1, n2) => `${ defaultTo(valueOf(n1) + valueOf(n2), '') }${ defaultTo(unitOf(n1) || unitOf(n2), '') }`\nexport const sub = (n1, n2) => `${ defaultTo(valueOf(n1) - valueOf(n2), '') }${ defaultTo(unitOf(n1) || unitOf(n2), '') }`\nexport const mul = (n1, n2) => `${ defaultTo(valueOf(n1) * valueOf(n2), '') }${ defaultTo(unitOf(n1) || unitOf(n2), '') }`\nexport const div = (n1, n2) => {\n  const _n1 = valueOf(n1)\n  const _n2 = valueOf(n2)\n\n  if(_n1 === 0 && _n2 === 0) {\n    return ''\n  }\n  return `${ defaultTo(valueOf(n1) / valueOf(n2), '') }${ defaultTo(unitOf(n1) || unitOf(n2), '') }`\n}\n"]}